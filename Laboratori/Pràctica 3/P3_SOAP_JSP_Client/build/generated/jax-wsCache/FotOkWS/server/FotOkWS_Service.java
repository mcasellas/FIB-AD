
package server;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.11-b150120.1832
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "FotOkWS", targetNamespace = "http://Server/", wsdlLocation = "file:/Users/marccasellas/Documents/GitHub/FIB-AD/Laboratori/P3/P3_SOAP_Client_Application/xml-resources/web-service-references/FotOkWS/wsdl/localhost_8080/P3_SOAP/FotOkWS.wsdl")
public class FotOkWS_Service
    extends Service
{

    private final static URL FOTOKWS_WSDL_LOCATION;
    private final static WebServiceException FOTOKWS_EXCEPTION;
    private final static QName FOTOKWS_QNAME = new QName("http://Server/", "FotOkWS");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
            url = new URL("file:/Users/marccasellas/Documents/GitHub/FIB-AD/Laboratori/P3/P3_SOAP_Client_Application/xml-resources/web-service-references/FotOkWS/wsdl/localhost_8080/P3_SOAP/FotOkWS.wsdl");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        FOTOKWS_WSDL_LOCATION = url;
        FOTOKWS_EXCEPTION = e;
    }

    public FotOkWS_Service() {
        super(__getWsdlLocation(), FOTOKWS_QNAME);
    }

    public FotOkWS_Service(WebServiceFeature... features) {
        super(__getWsdlLocation(), FOTOKWS_QNAME, features);
    }

    public FotOkWS_Service(URL wsdlLocation) {
        super(wsdlLocation, FOTOKWS_QNAME);
    }

    public FotOkWS_Service(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, FOTOKWS_QNAME, features);
    }

    public FotOkWS_Service(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public FotOkWS_Service(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns FotOkWS
     */
    @WebEndpoint(name = "FotOkWSPort")
    public FotOkWS getFotOkWSPort() {
        return super.getPort(new QName("http://Server/", "FotOkWSPort"), FotOkWS.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns FotOkWS
     */
    @WebEndpoint(name = "FotOkWSPort")
    public FotOkWS getFotOkWSPort(WebServiceFeature... features) {
        return super.getPort(new QName("http://Server/", "FotOkWSPort"), FotOkWS.class, features);
    }

    private static URL __getWsdlLocation() {
        if (FOTOKWS_EXCEPTION!= null) {
            throw FOTOKWS_EXCEPTION;
        }
        return FOTOKWS_WSDL_LOCATION;
    }

}
